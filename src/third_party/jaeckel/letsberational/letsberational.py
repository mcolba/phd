# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.3.1
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _letsberational
else:
    import _letsberational

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)



def Black(F, K, sigma, T, q):
    return _letsberational.Black(F, K, sigma, T, q)

def NormalisedBlack(x, s, q):
    return _letsberational.NormalisedBlack(x, s, q)

def ImpliedBlackVolatility(price, F, K, T, q):
    return _letsberational.ImpliedBlackVolatility(price, F, K, T, q)

def NormalisedImpliedBlackVolatility(beta, x, q):
    return _letsberational.NormalisedImpliedBlackVolatility(beta, x, q)

def ComplementaryNormalisedBlack(x, s):
    return _letsberational.ComplementaryNormalisedBlack(x, s)

def Vega(F, K, sigma, T):
    return _letsberational.Vega(F, K, sigma, T)

def NormalisedVega(x, s):
    return _letsberational.NormalisedVega(x, s)

def Volga(F, K, sigma, T):
    return _letsberational.Volga(F, K, sigma, T)

def NormalisedVolga(x, s):
    return _letsberational.NormalisedVolga(x, s)

def BlackAccuracyFactor(x, s, q):
    return _letsberational.BlackAccuracyFactor(x, s, q)

def ImpliedVolatilityAttainableAccuracy(x, s, q):
    return _letsberational.ImpliedVolatilityAttainableAccuracy(x, s, q)

def DblEpsilon():
    return _letsberational.DblEpsilon()

def DblMin():
    return _letsberational.DblMin()

def DblMax():
    return _letsberational.DblMax()

